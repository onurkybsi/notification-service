services:
  db:
    profiles: ["all", "without_loki", "db_only", "without_observability"]
    image: postgres:15.5
    container_name: "postgres"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=notification_db
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password

  mailhog:
    profiles: ["all", "without_observability"]
    image: mailhog/mailhog:v1.0.1
    ports:
      - "1025:1025"
      - "8025:8025"

  zookeeper:
    profiles: ["all", "without_observability"]
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka-ui:
    profiles: ["all", "without_observability"]
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - 8090:8080
    depends_on:
      - kafka-broker
    environment:
      KAFKA_CLUSTERS_0_NAME: cluster1
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker:9092
      DYNAMIC_CONFIG_ENABLED: 'true'

  kafka-broker:
    profiles: ["all", "without_observability"]
    image: confluentinc/cp-kafka:7.2.1
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker:9092,EXTERNAL://localhost:8097
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  opentelemetry-collector:
    profiles: ["all", "without_loki"]
    image: otel/opentelemetry-collector-contrib:0.116.1
    container_name: "otel-collector"
    volumes:
      - ./otel-collector-config.yaml:/etc/otel/config.yaml
      - ./exporters/logs:/exporters/logs
      - ./exporters/metrics:/exporters/metrics
      - ./exporters/traces:/exporters/traces
    command:
      - '--config=/etc/otel/config.yaml'
    ports:
      - "4318:4318" # HTTP receiver

  loki:
    profiles: ["all"]
    image: grafana/loki:3.3.2
    container_name: "loki"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  grafana:
    profiles: ["all", "without_loki"]
    image: grafana/grafana:11.4.0
    container_name: "grafana"
    volumes:
      - ./grafana:/etc/grafana/provisioning
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_FEATURE_TOGGLES_ENABLE=accessControlOnCall
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    ports:
      - "3000:3000/tcp"

  prometheus:
    profiles: ["all", "without_loki"]
    image: prom/prometheus:v3.1.0
    container_name: "prometheus"
    volumes:
      - "./prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml"
    command:
      - "--config.file=/etc/prometheus/prometheus-config.yaml"
    ports:
      - 9090:9090

  jaeger:
    profiles: ["all", "without_loki"]
    # 'memory' storage type is only available in all-in-one image, in production use the collector with a storage backend!
    image: jaegertracing/all-in-one:1.65.0
    container_name: "jaeger"
    ports:
      - "4317:4317"
      - "16686:16686"
    environment:
      - SPAN_STORAGE_TYPE=memory
      - JAEGER_DISABLED=true
